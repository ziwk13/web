Variable (변수): 값을 저장 하기 위한 메모리 공간의 이름
 1. var: 함수 스코프, 재선언 가능
 2. let: 블록 스코프, 재선언 불가, 재할당 가능
 3. const: 블록 스코프, 재선언/재할당 불가 (단, 객체나 배열 같은 참조 타입의 내부 속성/요소는 변경 가능)

scope (스코프) - var: 함수 전체에서 유효
                let,const: 블록({}) 안에서만 유효

                1. 전역 스코프 (Global Scope) : 코드 어디에서든 접근 가능한 가장 넓은 범위
                                                스크립트 파일 바깥, 즉 함수나 블록(중괄호) 바깥에 선언한 변수나
                                                함수는 모두 전역 스코프에 해당
ps.전역 스코프가 많아지면 전역 변수 충돌 위험이 크고, 유지 보수도 어려워짐 가급적 전역 변수는 최소화 하고, 필요한 로직은 함수나 블록 스코프로
   감싸서 쓰는게 좋다
                2. 함수 스코프 (Function Scope) : 함수 내부에서 선언된 변수나 매개변수(parameter)는 그 함수를 벗어나면 더 이상 접근 할 수 없음
                                                 var 키워드를 사용 할 때 주로 적용됨.
                                                 만약 함수 내부에서 let 이나 const를 쓰면, 블록 스코프 규칙이 적용 되기 때문에 함수 바깥 블록으로 나가면
                                                 접근 불가.
                3. 블록 스코프 (Block Scope) : {...} 중괄호로 감싸진 블록 단위로 변수를 구분하는 범위
                                             let, const, 클래스 선언(class), 그리고 ES6+에서 도입된 import 구문 등도 블록 스코프를 따름
                                             let, const는 블록 내부에서만 유효 하니, 반복문이나 조건문 처럼 블록을 많이 쓸 때는 var 대신 let,const 추천
                                             Temporal Dead Zone(TDZ): let,const 변수는 선언 전에 절대 접근하면 에러가 나고 이 구간을 TDZ라고 함.
                                             함수도 블록 스코프의 영향을 받음. 예를 들어 if 블록 안에서 선언된 함수는, 브라우저마다 동작이 미묘하게 다를 수 있지만
                                             ES6 모던 엔진에서는 블록 스코프 함수 선언을 허용 함.
                4. 렉시컬 스코프 (Lexical Scope) & 클로저 (Closure)
                    4-1 렉시컬 스코프: 함수가 어디서 정의(선언) 됐느냐에 따라 결정 되는 스코프.
                                      함수 안에서 또 함수를 정의 했을 때, 그 내부 함수가 바깥 함수의 변수에 접은 할 수 있는 권한을 말함
                                      함수가 선언된 위치를 기준으로 스코프 체인(scope chain)이 만들어진다.
                    4-2 클로저 (Closure): 함수가 만들어질 때, 그 함수가 선언 됐을 당시의 환경을 기억 하고 있는 구조로 함수가 바깥 함수의 변수에
                                         계속 접근 할 수 있음 (심지어 바깥 함수 실행이 끝난 뒤에도 가능)
                                         잘 활용 하면 데이터 은닉(data hiding)이나 캡슐화(encapsulation)같은 패턴을 구현 할 수 있다.
                5. 스코프 체인 (Scope Chain) : 변수나 함수를 찾을 때, 현재 스코프 -> 상위 스코프 -> 전역 스코프 순으로 연결되어 검색 하는 구조
                                              동작 방식으로 현재 스코프 -> 바깥 스코프 -> 상위 스코프 -> 전역 스코프 -> 그래도 없으면 ReferenceError
                   ReferenceError : 선언 전에 let, const 변수를 사용 하거나, 아예 존재 하지 않는 변수를 참조 할 때 발생 예: TDZ 구간에서 접근이나 아예 선언 하지 않은 변수 사용
                   변수 그림자 (Shadowing) : 상위 스코프에 같은 이름의 변수가 있을 때, 하위 스코프에서 동일한 이름으로 다시 선언 하면 하위 스코프 변수가 우선적으로 사용 됨. 
                                         실수로 같은 이름을 쓰면 상위 변수와 헷갈릴 수 있으니, 변수명 네이밍을 깔끔하게 해 두는게 좋다
                   의도치 않은 전역 변수 생성 : var,let,const 없이 변수를 할당 하면 자동으로 전역 변수가 만들어짐                                                     

호이스팅(hoisting) - var: 선언 단계만 끌어올려짐, 초기화는 원래 위치
                    let,const: 선언 전에 접근 하면 에러(Temporal Dead Zone, TDZ)
                    React에서는 코드 순서와 상관 없이 존재만 한다면 실행 되는 순간 컴포넌트를 찾아서 실행 (runtime 순간에 컴포넌트를 찾아서 실행)
                    compile -> runtime
                    다만, 관례적으로 코드 순서를 지켜서 작성 하기를 바람


2. Operator (연산자) : 변수나 값 사이에서 산술,비교,논리,할당 등을 수행 하는 기호,키워드
   1- 산술 연산자 (Arithmetic Operators) : +, -, *, /, %, **(거듭제곱)
   2- 대입 연산자 (Assignment Operator) : =, +=, -=, *=, /=, %= 등
   3- 비교 연산자 (Comparison Operator) : ==, ===, !=, !==, >, <, >=, <=
   4- 논리 연산자 (Logical Operator) : &&(AND), ||(OR), !(NOT)
   5- 증감 연산자 (Increment/Decrement Operator) : ++, --
   6- 삼항 연산자 (Conditional/Ternary Operator) : 조건 ? 참일 때 값 : 거짓일 때 값
   7- 기타 : 쉼표 연산자(,) 비트 연산자(&, |, ^, ~, <<, >>, <<<), typeof, instanceof 등

3. Control (제어문) : 코드 실행 흐름을 분기 하거나 반복 하기 위한 문장
   1- 조건문 (Conditional Statements)
      if / else if / else
      switch
   2- 반복문 (Loop Statements)
      for
      while / do...while
      for...in (객체의 열거 가능한 속성 순회)
      for...of (반복 가능한(iterable) 객체 순회: 배열,문자열,map,set 등)

4. Array (배열) : 여러 개의 값을 순서(index)가 있는 형태로 저장 할 수 있는 자료구조
   1- 인덱스(index) : 0부터 시작
   2- 길이(length) : arr.length
   3- 메소드 : push(), pop(), shift(), unshift(), splice(), slice(), forEach(), map(), filter(), reduce() 등
   원본 배열을 변경(Mutator) 하는 메소드 : 호출 하면 배열 자체가 바뀌기 때문에 이 배열을 바로 수정 해야 할 때 쓰인다.
   주로 요소 추가, 삭제, 정렬, 채우기 같은 작업이 포함 되어 있다.
   1-1 push(...elements) : 배열의 끝(end)에 하나 이상의 요소를 추가
                           반환 값은 추가 후 배열의 새 길이(length)
   1-2 pop() : 배열의 끝에서 마지막 요소 하나를 제거 하고, 제거된 요소를 반환 한다.
               반환 값은 제거된 요소(없으면 undefined)
   1-3 unshift(...elements) : 배열의 앞(front)에 하나 이상의 요소를 추가
                              반환 값은 추가 후 배열의 새 길이
   1-4 shift() : 배열의 앞에서 첫 번째 요소를 제거 하고, 그 값을 반환
                 반환 값은 제거된 첫 요소 (없으면 undefined)
   1-5 splice(start, deleteCount, ...items) : 배열 중간에서 요소 삭제,교체,추가를 동시에 할 때 사용.
       매개변수: start - (필수) 변경을 시작 할 인덱스 (음수를 넣으면 뒤에서부터 셈)
                deleteCount - (필수) 삭제할 요소 개수 (0이면 삭제 없이 추가만 함)
                ...items - (선택) 삭제한 자리에 추가할 요소들
                반환 값으로는 삭제된 요소들이 담긴 새 배열(Array)
   1-6 sort([compareFunction]) : 배열 요소를 정렬(디폴트는 문자열 기준 사전순), 원본 배열을 변경
       매개변수: compareFunction(a,b): 숫자나 문자열 비교를 직접 정의
                                      반환값이 음수면 a가 b보다 앞, 양수면 b가 a보다 앞, 0이면 위치 변경 없음
                                      매개변수 없으면 문자열 사전순 정렬
   1-7 reverse() : 배열 요소 순서를 역순으로 바꾸고, 원본을 변경
                   반환 값으로는 역순으로 바뀐 원본 배열
   1-8 fill(value, [start], [end]) : 배열의 지정 구간을 주어진 value로 모두 채우기, 원본 변경
       매개변수: 1. value: 채울 값
                2. start(선택, 기본 0): 시작 인덱스(포함)
                3. end(선택, 기본 배열 길이): 끝 인덱스(불포함)
                반환 값으로는 채워진 원본 배열 이다.
   1-9 copyWithin(target, [start], [end]) : 배열 내에서 특정 구간(start ~ end)을 복사(copy) 해서 또 다른 인덱스(target)에 덮어쓰기, 원본 변경
       매개변수: 1. target: 복사 붙여넣기를 시작 할 인덱스
                2. start(선택, 기본 0): 복사 할 구간의 시작 인덱스
                3. end(선택, 기본 배열 길이): 복사 할 구간의 끝 인덱스(불포함)
                반환 값으로는 변경된 원본 배열
   2-1 추출,검색,조합(Accessor) 메소드
    2-1-1 slice(start, [end]) : 배열의 일부분(start 인덱스 부터 end 인덱스 전까지)을 잘라내어 새 배열로 반환. 원본은 그대로
          매개변수: 1. start: 잘라낼 시작 인덱스 (음수 쓰면 뒤에서 부터 카운트)
                   2. end(선택, 기본 길이): 마지막 인덱스 바로 다음(불포함)
    2-1-2 concat

Dom (문서 객체)
* 정의: 브라우저가 HTML 파일을 읽어서 생성한 최상위 객체
 1.HTML 요소(태그)들을 계층적(트리) 구조로 관리
 2.스크립트에서 특정 요소를 찾거나(선택), 속성/텍스트/스타일 조작을 가능하게 한다
 3. 이벤트 리스너 등록, 새로운 노드 생성,추가,삭제 등 DOM 조작의 시작점

 DOM (Document Object Model)
 브라우저가 HTML 파일을 읽어들여서 눈에 보이는 페이지를 마치 나무(tree)처럼 구조화해 놓은 것
 즉, **HTML 코드를 하나하나 객체(상자)**로 바꿔서, 자바스크립트가 
 “어디에 뭐가 있는지, 어떻게 생겼는지, 어떻게 바꿀 수 있는지”
  알게 해주는 역할을 하는 것
 DOM을 사용 하는 이유: 자바스크립트로 페이지를 동적으로 바꾸고 싶을 때 (예: 버튼 누르면 글씨 바뀌기, 새로운 사진 추가 하기 등)
 

 이벤트 핸들러

 온클릭
 - 이벤트 핸들러 프로퍼티

    쿠키(Cookie)란?
   
   인터넷 쿠키란 웹 서버가 사용자의 웹 브라우저에 전송 하는 작은 데이터 파일(텍스트 정보)을 의미 한다.
   사용자가 웹 사이트에 방문 할 때 쿠키가 생성 되어 사용자의 컴퓨터(브라우저)에 저장 된다.
   사용자가 같은 웹 사이트를 다시 방문 할 때 저장 되어 있던 쿠키를 웹 서버에 전송 함으로서,
   사용자의 상태나 환경 설정, 사용자 정보(로그인)등을 확인 할 수 있도록 한다.
 

 세션(Session)이란?
 세션은 사용자가 웹사이트에 접속한 후, 접속을 종료 할 때까지의 상태나 정보를 저장 하는 방식
 예시로 로그인 정보가 있다.

 세션 주기란?
 세션이 시작돼서 끝날 때 까지의 시간
 -세선은 보통 사용자가 서버에 접속 하면 시작 되고, 일정 시간 활동이 없으면 자동으로 만료
| 조건              | 내용                                                                       |
| ----------------- | -------------------------------------------------------------------------- |
| 기본 유지 시간    | 보통 20\~30분 (서버 설정에 따라 다름)                                      |
| 활동 시 연장 여부 | 활동이 있으면 세션이 다시 연장될 수도 있음 (재접속 시마다 시간 초기화)     |
| 명시적 종료       | 사용자가 로그아웃하면 즉시 세션 종료됨                                     |
| 브라우저 닫을 때  | 클라이언트 측에서는 세션 쿠키가 브라우저 닫을 때 사라짐 (서버 세션과 별도) |

비동기: 전체 페이지를 새로 고침 하지 않고도 웹페이지의 일부를 동적으로 다루는것
Header: HTTP 요청/응답의 정보 태그들을 관리 하는 도구
elements: 
매개변수(Parameter, 함수 정의 시시): 함수나 메소드를 정의 할 때, 외부에서 값을 전달 받는 변수를 의미 한다. 함수가 어떤 동작을 수행 할 때 필요한 정보를 받아들이는 역할을 한다.
      1- 프로그래밍 언어에서 매개변수: 함수나 메소드를 정의 할 때, 괄호 안에 선언하는 변수를 매개변수라고 한다.
                                       이 변수는 함수가 호출될 때 외부에서 전달되는 값으로 초기화 된다.
      2- 입력 매개변수: 함수에 값을 전달하는 목적으로 사용되는 매개변수를 입력 매개변수라고 한다.
      3- 출력/반환 매개변수: 함수가 여러 값을 반환 할 때, 반환 값을 저장 하는데 사용되는 매개변수를 출력/반환 매개변수라고 한다.
      4- 매개변수와 인수: 함수를 호출 할 때, 매개변수에 전달되는 실제 값을 '인수'라고 한다.

인수(Argument, 함수 호출 시): 프로그래밍에서 함수를 호출 할 때 함수에 전달 되는 값 또는 데이터 이다. 함수를 실행 할 때 필요한 입력값을 의미 하며,
                              매개변수(parameter)와 함께 사용 된다.
                              함수의 동작에 필요한 정보를 제공 하고, 함수의 정의에 따라 어떤 데이터 타입이어야 하는지 결정 된다
                              또한, 함수 내에서 매개변수에 할당되어 사용 한다.
   인수(Argument)와 매개변수(Parameter)의 차이점:
      - 매개변수: 함수가 정의 될 때 함수의 입력으로 사용 되는 변수
      - 인수: 함수를 호출 할 때 실제로 전달 되는 값

--------------------------------------------------------------------------------리액트(React)-----------------------------------------------------------------------------------------------
JSX: 자바스크립트에 HTML 태그를 적용시킨 문법으로, HTML 태그 안에서는 {} (중괄호)를 사용해서 JS 표현식을 사용 할 수 있다.
컴포넌트(Component): 프로그램이나 디자인에서 특정 기능을 수행 하는 독립적인 부분이나 요소, 모듈을 가리킨다. 프로그래밍에서는 제사용 가능한 코드 조각으로서, UI구축, 소프트웨어 개발, 디자인 시스템구축 등 다양한 분야에서 활용
