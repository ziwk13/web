Hooks
1. 리액트 v16.8에서 새로 도입한 기능입니다.
2. 함수 컴포넌트에서는 생명주기 메소드를 사용할 수 없다는 한계점이 있습니다.
3. 이 문제를 해결하기 위해서 함수 컴포넌트에서 state 관리, 렌더링 이후 시점 컨트롤 등 다양한 문제를 해결하기 위해서 만든 함수 집합을 훅(Hooks)이라고 합니다.



State Hooks
1. state를 통해 컴포넌트는 사용자 입력과 같은 정보를 저장할 수 있습니다.
2. state를 업데이트하면 컴포넌트는 다시 렌더링됩니다.
3. 컴포넌트에 state를 추가하는 Hook은 아래와 같습니다.
  1) useState는 직접 업데이트할 수 있는 state 변수를 선언합니다.
  2) useReducer는 reducer 함수 내부의 업데이트 로직을 사용하여 state 변수를 선언합니다.



Context Hooks
1. context를 사용하면 컴포넌트가 멀리 있는 부모 컴포넌트로부터 props를 이용해 정보를 전달 받지 않더라도 정보를 받을 수 있습니다.
2. 예를 들어 최상위 컴포넌트는 현재 UI 테마를 아래의 모든 컴포넌트에게 전달할 수 있습니다.
3. useContext는 context를 읽고 구독합니다.



Ref Hooks
1. ref를 사용하면 컴포넌트가 DOM 노드나 timeout ID와 같이 렌더링에 사용되지 않는 일부 정보를 저장할 수 있습니다.
2. state와 달리 ref를 업데이트해도 컴포넌트는 다시 렌더링 되지 않습니다.
3. 일반적으로는 DOM 노드를 저장해 두고 다시 참조하기 위해서 사용합니다.
4. useRef는 ref를 선언합니다. 여기에는 어떤 값이든 담을 수 있지만 대부분 DOM 노드를 담는 데 사용됩니다.



Effect Hooks
1. effect를 통해 컴포넌트를 외부 시스템에 연결하고 동기화 할 수 있습니다.
2. 네트워크, 브라우저 DOM, 애니메이션, 다른 UI 라이브러리를 사용하여 작성한 위젯 등을 다루는 것이 포함됩니다.
3. useEffect은 렌더링 이후에 처리해야 하는 작업을 수행할 수 있습니다.



Performance Hooks
1. 재렌더링 성능을 최적화 하기 위해서 사용하는 Hook입니다.
2. 일반적으로 불필요한 작업을 건너뛰게 하는 방법을 사용합니다.
3. 예를 들어 이전 렌더링 이후 데이터의 변화가 없다면 캐싱한 계산 결과를 재사용하거나 재런더링을 건너뛰도록 설정할 수 있습니다.
4. 계산과 불필요한 재렌더링을 건너뛰는 Hook은 아래와 같습니다.
  1) useMemo를 사용하면 비용이 많이 드는 계산 결과를 캐시할 수 있습니다.
  2) useCallback을 사용하면 함수 정의를 최적화된 컴포넌트에 전달하기 전에 캐시할 수 있습니다.
